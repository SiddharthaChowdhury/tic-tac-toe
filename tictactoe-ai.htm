<!DOCTYPE html>
<html>
<head>
	<title>tic tac toe</title>
	<style type="text/css">
		#wrapper{
			width: 300px;
			height: 300px;
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			
		}
		#board{
			display: flex;
			flex-direction: row;
			flex-wrap: wrap;
			justify-content: flex-start;
		}
		.block{
			width: 100px;
			height: 100px;
			/*border: 1px solid #e0e0e0;*/
			border: 1px solid #000000;

			box-sizing: border-box;
			display: flex;
			justify-content: center;
			align-items: center;
			margin: 0px !important;
		}
		.block:hover{
			background-color: #c0c0c0;
			cursor: pointer;
		}
		.bottom-dash{
			display: flex;
			height: 50px;
		}
		.options{
			padding: 15px 10px 0px 0px;
		}
	</style>
</head>
<body>
	<div id="wrapper">
		<div id="board" >
			<div class="block"></div>
			<div class="block"></div>
			<div class="block"></div>

			<div class="block"></div>
			<div class="block"></div>
			<div class="block"></div>

			<div class="block"></div>
			<div class="block"></div>
			<div class="block"></div>
		</div>
		<div class="bottom-dash">
			<div class="options status"></div>
			<div class="options">
				<input type="checkbox" value="X" class="ai-toggle">	autoX
				<input type="checkbox" value="O" class="ai-toggle">	autoO
			</div>
			<div class="options">
				<button id="reset-board">Reset</button>
			</div>
		</div>
	</div>
	<script type="text/javascript">
		var toggle = 0,
		ai = {'X': 0, 'O': 0}
		turn = ["X", "O"],
		/*
			0	1	2
			3	4	5
			6	7	8
		*/
		wombos = [
			[0,1,2], [3,4,5], [6,7,8], // H orizontals
			[0,3,6], [1,4,7], [2,5,8], // V erticals
			[0,4,8], [2,4,6]		   // D iagonals
		];

		document.querySelector('#board').addEventListener('click', function(e){
			if(e.target.innerHTML == ""){
				e.target.innerHTML = turn[toggle];
				if(!isWinner( turn[toggle] )){
					toggle = toggle == 0 ? 1 : 0;
					autoFillBoard(); // will run auto if any enabled.
				}
				else{
					document.querySelector('.status').innerHTML = "Winner = "+turn[toggle];
					var f = document.querySelectorAll('.block');
					console.log(f)
					for(var i in f){
						if(f[i].innerHTML == ""){
							f[i].innerHTML = ' '
						}
					}
				}
			} 
		});
		

		function getCurrentCombo(turn){
			var x = Array.prototype.slice.call(document.querySelectorAll('.block'));
			var vals = x.map(function(block){
				return block.innerHTML
			});
			var cur_combo = [];
			for(var i in vals){
				if(vals[i] == turn)
					cur_combo.push(i);
			}
			return cur_combo;
		}

		function isWinner(turn){
			
			var cur_combo = getCurrentCombo(turn);
			
			if(cur_combo.length < 3)
				return false;
			for(var i in wombos){
				var flag = 0;
				for(var j in wombos[i]){
					if( cur_combo.indexOf(wombos[i][j].toString()) > -1 )
						flag ++;
				}
				if( flag == 3 ){
					console.log("WINNING Combo: ",wombos[i])
					var blocks = document.querySelectorAll('.block');
					for(var s in wombos[i])
						blocks[wombos[i][s]].style.background = 'green'
					return true;
				}
			}
			return false;
		}
		
		// -------------------------- AI IMPLEMENTATION =>
		var autos = document.querySelectorAll('.ai-toggle');
		for(var i = 0; i< autos.length; i++){
			autos[i].addEventListener('change', function(e){
				if(this.checked)
					ai[e.target.value] = 1;
				else
					ai[e.target.value] = 0;
				autoFillBoard();
			});
		}

		function autoFillBoard(){
			var turn_of = turn[toggle];
			if(ai[turn_of]){
				// AI logic
				var cur_combo = getCurrentCombo(turn_of);
				var best_win = {};
				if( cur_combo.length == 0 ){ // For first entry
					var x = Array.prototype.slice.call(document.querySelectorAll('.block'));
					var vals = x.map(function(block){
						return block.innerHTML
					});
					var empty_blocks = []
					for(var i =0; i< vals.length; i++){
						if( vals[i] == "" )
							empty_blocks.push(i);
					}
					var blocks = document.querySelectorAll('.block')
					blocks[Math.floor((Math.random()*empty_blocks.length) + 0)].innerHTML = turn_of
					toggle = toggle == 0 ? 1 : 0;
				}
				else{
					/* ================================= RULES ======================================== */
					// 1. Find and stack win combos 
					//		` 1.1	Get all possible wombos according current state of turn of THIS (X/O) in an array (say POSBL_WINS)
					//		` 1.2	From POSBL_WINS eliminate combos that are impossible 
					// 2. If POSBL_WINS is empty then fill any one of the empty block on the game board
					// 3. Else start plotting the first POSBL_WINS array
					/* ================================================================================ */

					// 1 Finding and stacking win combos
					//		` 1.1	Getting all possible wombos (winning combos) 
					var possible_wins = []
					var cur_combo = getCurrentCombo(turn_of);
					for(var i in wombos){
						var flag = 0;
						for(var j in cur_combo){
							if(wombos[i].indexOf(parseInt(cur_combo[j])) > -1 )
								flag ++;
						}
						if(flag > 0){
							possible_wins.push(wombos[i]) 
						}
					}
					//	` 1.2 Elimination of impossibles
					var board_sene = []
					console.log(possible_wins);
				}
			}
		}

	</script>
</body>
</html>